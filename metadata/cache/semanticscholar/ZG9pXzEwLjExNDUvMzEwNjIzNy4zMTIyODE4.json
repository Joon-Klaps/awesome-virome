{
  "cache_date": "2025-03-14T03:16:58.275024",
  "data": {
    "paperId": "aa91561afffa236759f9442ade1aba8e1fc6bce5",
    "externalIds": {
      "MAG": "2742105257",
      "DBLP": "conf/sigsoft/BunyakiatiP17",
      "ArXiv": "1708.02393",
      "DOI": "10.1145/3106237.3122818",
      "CorpusId": 822488
    },
    "url": "https://www.semanticscholar.org/paper/aa91561afffa236759f9442ade1aba8e1fc6bce5",
    "title": "Cherry-picking of code commits in long-running, multi-release software",
    "abstract": "This paper presents Tartarian, a tool that supports maintenance of software with long-running, multi-release branches in distributed version control systems. When new maintenance code, such as bug fixes and code improvement, is committed into a branch, it is likely that such code can be applied or reused with some other branches. To do so, a developer may manually identify a commit and cherry pick it. Tartarian can support this activity by providing commit hashtags, which the developer uses as metadata to specify their intentions when committing the code. With these tags, Tartarian uses dependency graph, that represents the dependency constraints of the branches, and Branch Identifier, which matches the commit hashtags with the dependency graph, to identify the applicable branches for the commits. Using Tartarian, developers may be able to maintain software with multiple releases more efficiently. A video demo of Tartarian is available at www.github.com/tartarian.",
    "venue": "ESEC/SIGSOFT FSE",
    "year": 2017,
    "referenceCount": 10,
    "citationCount": 4,
    "influentialCitationCount": 0,
    "authors": [
      {
        "authorId": "1904494",
        "name": "P. Bunyakiati"
      },
      {
        "authorId": "11140147",
        "name": "Chadarat Phipathananunth"
      }
    ],
    "citations": [
      {
        "paperId": "0a93644f25559025fdc2091d6b49f3ced5d5e470",
        "title": "A Meta-Study of Software-Change Intentions"
      },
      {
        "paperId": "b501008f03e45d6e70dd7cf094f541da70dbf829",
        "title": "Dependency Facade: The Coupling and Conflicts between Android Framework and Its Customization"
      },
      {
        "paperId": "2e9916c304750379e84db19cfecb417213db1057",
        "title": "Analysis and Propagation of Feature Revisions in Preprocessor-based Software Product Lines"
      },
      {
        "paperId": "54c1d22617be88107159780150cb8fea7ed7eb98",
        "title": "Open-Source Projects and their Collaborative Development Workflows"
      }
    ],
    "references": [
      {
        "paperId": "e22df3f3fd6d86a4ed666ab7381054ba41f2dccd",
        "title": "Towards Automatic Generation of Short Summaries of Commits"
      },
      {
        "paperId": "148ce170043d69665120ccf876a9604f82d683da",
        "title": "Open Source-Style Collaborative Development Practices in Commercial Projects Using GitHub"
      },
      {
        "paperId": "577c9472f30d63972ca4437f609130ab35812d18",
        "title": "On Automatically Generating Commit Messages via Summarization of Source Code Changes"
      },
      {
        "paperId": "3dc75aa55390315f38da3b358a9688bd157657b6",
        "title": "Analyzing and Generating Commit Messages for Software Repositories"
      },
      {
        "paperId": "8f0dd644726fca7a553ea4ab424c5c48da9053a5",
        "title": "Characterizing and predicting which bugs get fixed: an empirical study of Microsoft Windows"
      },
      {
        "paperId": "f4cdca608479bdc4f167c960e4ad2e0f25c5207e",
        "title": "The secret life of bugs: Going past the errors and omissions in software repositories"
      },
      {
        "paperId": "fb35f65339c4f1bbe9c0bd25f09f83e65e436d51",
        "title": "Comparison and evaluation of code clone detection techniques and tools: A qualitative approach"
      },
      {
        "paperId": "a369ec7cc8a6d84bbae2b1f0fa073a06e7d32ac0",
        "title": "Comparison and Evaluation of Clone Detection Tools"
      },
      {
        "paperId": "9fd9956d4ab69f50f0c896b154a1e011bba8d255",
        "title": "Efficient Integration Testing using Dependency Analysis"
      },
      {
        "paperId": null,
        "title": "Standard Edition Oracle JDK 9 Migration Guide"
      }
    ]
  }
}
name: Test Caching System

on:
  push:
    branches: [ main, enhance_metadata ]
    paths:
      - 'scripts/apis/citations_api.py'
      - 'scripts/enhance_metadata.py'
      - 'scripts/academic_impact.py'
      - 'scripts/clear_cache.py'
      - 'scripts/tests/test_cache_manager.py'
      - '.github/workflows/test_caching.yml'
  pull_request:
    branches: [ main, enhance_metadata ]
    paths:
      - 'scripts/apis/citations_api.py'
      - 'scripts/enhance_metadata.py'
      - 'scripts/academic_impact.py'
      - 'scripts/clear_cache.py'
      - 'scripts/tests/test_cache_manager.py'
      - '.github/workflows/test_caching.yml'
  workflow_dispatch:  # Allow manual triggering

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        pip install -r requirements.txt
        pip install PyGithub pyyaml
        
    - name: Run unit tests with coverage
      run: |
        pytest scripts/tests/test_cache_manager.py -v --cov=scripts/apis/citations_api --cov-report=xml
        
    - name: Upload coverage report
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  integration-test:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install PyGithub pyyaml
        
    - name: Run integration test
      env:
        # Test with dummy token to ensure API rate limits are handled properly
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Run a realistic end-to-end test with the caching system
        echo "Testing cache creation..."
        python scripts/enhance_metadata.py --limit 5
        
        # Verify cache files were created
        echo "Verifying cache files..."
        find metadata/cache -type f | wc -l
        
        # Run again to test cache hits
        echo "Testing cache hits..."
        python scripts/enhance_metadata.py --limit 5
        
        # Clear specific repo cache
        echo "Testing selective cache clearing..."
        python scripts/clear_cache.py --stats
        REPO_URL=$(grep -m 1 "url" metadata/summary.json | awk -F\" '{print $4}')
        python scripts/clear_cache.py --clear-repo "$REPO_URL"
        
        # Verify it worked
        python scripts/clear_cache.py --stats
        
    - name: Cache performance report
      run: |
        echo "## Cache Performance Report" > cache_report.md
        echo "" >> cache_report.md
        echo "Generated: $(date)" >> cache_report.md
        echo "" >> cache_report.md
        echo "### Cache Statistics" >> cache_report.md
        python scripts/clear_cache.py --stats >> cache_report.md
        echo "" >> cache_report.md
        
    - name: Upload cache report
      uses: actions/upload-artifact@v4
      with:
        name: cache-performance-report
        path: cache_report.md
name: Data Quality Metrics

on:
  schedule:
    - cron: "0 5 * * 1"  # Every Monday at 5am UTC (after workflow coordination)
  workflow_dispatch:

# Permissions needed for creating and managing PRs
permissions:
  contents: write
  pull-requests: write

jobs:
  collect-data-metrics:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          # Fetch all history for proper branch creation
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pandas matplotlib numpy
      
      - name: Collect data quality metrics
        run: |
          python scripts/data_quality_metrics.py --output-file metrics_report.json --report --report-file data_quality_report.md
      
      - name: Generate trend visualization
        run: |
          # Optional: Use pandas and matplotlib to generate trends from metrics_history.json
          if [ -f "reports/data_quality_history.json" ]; then
            python - <<EOF
          import json
          import pandas as pd
          import matplotlib.pyplot as plt
          import numpy as np
          from datetime import datetime
          
          # Load metrics history
          with open('reports/data_quality_history.json', 'r') as f:
              data = json.load(f)
          
          if len(data.get('history', [])) > 1:
              # Extract metrics over time
              dates = []
              total_tools = []
              critical_completion = []
              metadata_completion = []
              tools_with_citation = []
              
              for entry in data['history']:
                  try:
                      dates.append(datetime.fromisoformat(entry['timestamp'].replace('Z', '+00:00')))
                      total_tools.append(entry['total_tools'])
                      critical_completion.append(entry['critical_fields_completion'])
                      metadata_completion.append(entry['metadata_completion'])
                      tools_with_citation.append(entry['tools_with_citation'])
                  except (KeyError, ValueError) as e:
                      print(f"Skipping incomplete entry: {e}")
              
              # Create plot with multiple subplots
              fig, axs = plt.subplots(2, 2, figsize=(12, 10))
              
              # Plot total tools
              axs[0, 0].plot(dates, total_tools, marker='o')
              axs[0, 0].set_title('Total Tools')
              axs[0, 0].set_ylabel('Count')
              plt.setp(axs[0, 0].xaxis.get_majorticklabels(), rotation=45)
              
              # Plot critical field completion
              axs[0, 1].plot(dates, critical_completion, marker='o', color='green')
              axs[0, 1].set_title('Critical Fields Completion')
              axs[0, 1].set_ylabel('Percentage (%)')
              plt.setp(axs[0, 1].xaxis.get_majorticklabels(), rotation=45)
              
              # Plot metadata completion
              axs[1, 0].plot(dates, metadata_completion, marker='o', color='orange')
              axs[1, 0].set_title('Metadata Completion')
              axs[1, 0].set_ylabel('Percentage (%)')
              plt.setp(axs[1, 0].xaxis.get_majorticklabels(), rotation=45)
              
              # Plot tools with citation
              axs[1, 1].plot(dates, tools_with_citation, marker='o', color='purple')
              axs[1, 1].set_title('Tools with Citations')
              axs[1, 1].set_ylabel('Count')
              plt.setp(axs[1, 1].xaxis.get_majorticklabels(), rotation=45)
              
              plt.tight_layout()
              plt.savefig('reports/data_quality_trends.png')
              print("Generated trends visualization")
          else:
              print("Not enough history data for trend visualization")
          EOF
          fi
      
      - name: Create combined report
        run: |
          if [ -f "reports/data_quality_trends.png" ]; then
            # Add the image to the report
            echo -e "\n\n## Data Quality Trends\n\n![Data Quality Trends](data_quality_trends.png)\n\n" >> reports/data_quality_report.md
          fi
      
      - name: Upload metrics report
        uses: actions/upload-artifact@v4
        with:
          name: data-quality-metrics
          path: |
            reports/metrics_report.json
            reports/data_quality_report.md
            reports/data_quality_trends.png
            reports/data_quality_history.json
      
      - name: Prepare changes
        id: prepare
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add all reports
          git add reports/metrics_report.json reports/data_quality_report.md reports/data_quality_history.json
          if [ -f "reports/data_quality_trends.png" ]; then
            git add reports/data_quality_trends.png
          fi
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
            echo "changes_detected=false" >> $GITHUB_OUTPUT
          else
            # Create a unique branch name with timestamp
            BRANCH_NAME="data-quality-metrics-$(date +%Y%m%d-%H%M%S)"
            echo "changes_detected=true" >> $GITHUB_OUTPUT
            echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          fi
      
      - name: Create Pull Request
        if: steps.prepare.outputs.changes_detected == 'true'
        id: create-pr
        uses: peter-evans/create-pull-request@v5
        with:
          # Use PAT_TOKEN if available, otherwise fall back to GITHUB_TOKEN
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          commit-message: Update data quality metrics
          title: Update data quality metrics
          body: |
            ## Automated PR with data quality metrics
            
            This PR updates the data quality metrics based on the latest analysis run.
            
            Changes include:
            - Updated data quality metrics in `reports/metrics_report.json`
            - Updated data quality report in `reports/data_quality_report.md`
            - Updated data quality history in `reports/data_quality_history.json`
            - Updated data quality trends visualization (if available)
            
            Generated automatically by GitHub Actions workflow.
          branch: ${{ steps.prepare.outputs.branch_name }}
          base: main
          delete-branch: false
      
      - name: PR Creation Result
        if: steps.prepare.outputs.changes_detected == 'true'
        run: |
          if [[ -n "${{ steps.create-pr.outputs.pull-request-url }}" ]]; then
            echo "::notice::PR created successfully: ${{ steps.create-pr.outputs.pull-request-url }}"
          else
            echo "::warning::PR creation failed. You need to configure one of the following:"
            echo "::warning::1. Add a Personal Access Token (PAT) with 'repo' scope as a repository secret named 'PAT_TOKEN'"
            echo "::warning::2. Enable 'Allow GitHub Actions to create and approve pull requests' in repository Settings > Actions > General"
            
            # Provide manual PR creation URL as fallback
            echo "::notice::For now, you can create a PR manually at: https://github.com/$GITHUB_REPOSITORY/pull/new/${{ steps.prepare.outputs.branch_name }}"
          fi